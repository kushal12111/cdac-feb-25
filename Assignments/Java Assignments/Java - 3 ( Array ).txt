1.
int[] arr = {3, 1, 4, 1, 5, 9, 2, 6, 5};
int largest = arr[0];
int smallest = arr[0];
for (int i = 1; i < arr.length; i++) {
    if (arr[i] > largest) largest = arr[i];
    if (arr[i] < smallest) smallest = arr[i];
}
System.out.println("Largest: " + largest + ", Smallest: " + smallest);

2.
int[] arr = {1, 2, 3, 4, 5};
int n = arr.length;
for (int i = 0; i < n / 2; i++) {
    int temp = arr[i];
    arr[i] = arr[n - i - 1];
    arr[n - i - 1] = temp;
}
System.out.println(Arrays.toString(arr));

3.
int[] arr = {10, 20, 4, 45, 99};
Arrays.sort(arr);
int secondLargest = arr[arr.length - 2];
System.out.println("Second Largest: " + secondLargest);

4.
int[] arr = {1, 2, 3, 4, 5, 6};
int evenCount = 0;
int oddCount = 0;
for (int num : arr) {
    if (num % 2 == 0) {
        evenCount++;
    } else {
        oddCount++;
    }
}
System.out.println("Even numbers: " + evenCount + ", Odd numbers: " + oddCount);

5.
int[] arr = {1, 2, 3, 4, 5};
int totalSum = 0;
for (int num : arr) {
    totalSum += num;
}
double average = (double) totalSum / arr.length;
System.out.println("Sum: " + totalSum + ", Average: " + average);

6.
int[] arr = {1, 1, 2, 2, 3, 4, 4, 5};
int[] result = new int[arr.length];
int j = 0;
for (int i = 0; i < arr.length - 1; i++) {
    if (arr[i] != arr[i + 1]) {
        result[j++] = arr[i];
    }
}
result[j++] = arr[arr.length - 1];
int[] uniqueArray = Arrays.copyOf(result, j);
System.out.println(Arrays.toString(uniqueArray));

7.
int[] arr = {1, 2, 3, 4, 5};
int k = 2;
int n = arr.length;
int[] rotatedArray = new int[n];
for (int i = 0; i < n; i++) {
    rotatedArray[(i + k) % n] = arr[i];
}
System.out.println(Arrays.toString(rotatedArray));

8.
int[] arr1 = {1, 3, 5, 7};
int[] arr2 = {2, 4, 6, 8};
int[] mergedArray = new int[arr1.length + arr2.length];
int i = 0, j = 0, k = 0;
while (i < arr1.length && j < arr2.length) {
    if (arr1[i] < arr2[j]) {
        mergedArray[k++] = arr1[i++];
    } else {
        mergedArray[k++] = arr2[j++];
    }
}
while (i < arr1.length) {
    mergedArray[k++] = arr1[i++];
}
while (j < arr2.length) {
    mergedArray[k++] = arr2[j++];
}
System.out.println(Arrays.toString(mergedArray));

9.

int[] arr = {1, 2, 4, 5, 6};
int n = arr.length + 1;
int total = n * (n + 1) / 2;
int sum = 0;
for (int num : arr) {
    sum += num;
}
int missingNumber = total - sum;
System.out.println("Missing Number: " + missingNumber);


10.

int[] arr1 = {1, 2, 2, 3, 4};
int[] arr2 = {2, 3, 5};
Set<Integer> set1 = new HashSet<>();
for (int num : arr1) {
    set1.add(num);
}
Set<Integer> set2 = new HashSet<>();
for (int num : arr2) {
    set2.add(num);
}
set1.retainAll(set2);
System.out.println("Intersection: " + set1);
set1 = new HashSet<>();
for (int num : arr1) {
    set1.add(num);
}
for (int num : arr2) {
    set1.add(num);
}
System.out.println("Union: " + set1);



11.

public static int[] subarraySum(int[] arr, int S) {
    for (int i = 0; i < arr.length; i++) {
        int currentSum = arr[i];
        for (int j = i + 1; j <= arr.length; j++) {
            if (currentSum == S) {
                return Arrays.copyOfRange(arr, i, j);
            }
            if (j == arr.length) break;
            currentSum += arr[j];
        }
    }
    return new int[0];
}

public static void main(String[] args) {
    int[] arr = {1, 2, 3, 7, 5};
    int S = 12;
    int[] result = subarraySum(arr, S);
    System.out.println(Arrays.toString(result));
}


12.

import java.util.Scanner;

public class ArrayAnalysis {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr = new int[20];
        int evenCount = 0, oddCount = 0, multiplesOfThreeCount = 0;

        System.out.println("Enter 20 integers:");
        for (int i = 0; i < 20; i++) {
            arr[i] = scanner.nextInt();
            if (arr[i] % 2 == 0) evenCount++;
            else oddCount++;
            if (arr[i] % 3 == 0) multiplesOfThreeCount++;
        }

        System.out.println("Number of even numbers: " + evenCount);
        System.out.println("Number of odd numbers: " + oddCount);
        System.out.println("Number of multiples of 3: " + multiplesOfThreeCount);
    }
}

13.
import java.util.Scanner;

public class StudentMarks {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] marks = new int[20][3];
        int above75Count = 0, below40Count = 0;

        System.out.println("Enter marks for 20 students in Physics, Chemistry, and Maths:");
        for (int i = 0; i < 20; i++) {
            for (int j = 0; j < 3; j++) {
                marks[i][j] = scanner.nextInt();
            }
            int totalMarks = marks[i][0] + marks[i][1] + marks[i][2];
            double percentage = (totalMarks / 3.0);
            if (percentage >= 75) above75Count++;
            if (percentage <= 40) below40Count++;
        }

        System.out.println("Number of students securing 75% and above: " + above75Count);
        System.out.println("Number of students securing 40% and below: " + below40Count);
    }
}


14.

import java.util.ArrayList;
import java.util.Scanner;

public class EvenOddSeparation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr = new int[20];
        ArrayList<Integer> evenList = new ArrayList<>();
        ArrayList<Integer> oddList = new ArrayList<>();

        System.out.println("Enter 20 integers:");
        for (int i = 0; i < 20; i++) {
            arr[i] = scanner.nextInt();
            if (arr[i] % 2 == 0) evenList.add(arr[i]);
            else oddList.add(arr[i]);
        }

        System.out.println("Even numbers: " + evenList);
        System.out.println("Odd numbers: " + oddList);
    }
}



15.

import java.util.HashMap;
import java.util.ArrayList;

public class ZeroSumSubarrays {
    public static void main(String[] args) {
        int[][] arrays = {
            { 1, 3, -7, 3, 2, 3, 1, -3, -2, -2 },
            { 1, 2, -3, 4, 5, 6 },
            { 1, 2, -2, 3, 4, 5, 6 }
        };

        for (int[] nums : arrays) {
            System.out.println("Sub-arrays with 0 sum:");
            findZeroSumSubarrays(nums);
        }
    }

    public static void findZeroSumSubarrays(int[] nums) {
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        int sum = 0;

        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (sum == 0) {
                System.out.println("[" + 0 + ", " + i + "]");
            }
            if (map.containsKey(sum)) {
                ArrayList<Integer> indices = map.get(sum);
                for (Integer index : indices) {
                    System.out.println("[" + (index + 1) + ", " + i + "]");
                }
            }
            map.computeIfAbsent(sum, k -> new ArrayList<>()).add(i);
        }
    }
}

16.
import java.util.Arrays;

public class MergeSortedArrays {
    public static void main(String[] args) {
        int[] A = {1, 5, 6, 7, 8, 10};
        int[] B = {2, 4, 9};
        int p = A.length;
        int q = B.length;

        int[] mergedArray = new int[p + q];
        System.arraycopy(A, 0, mergedArray, 0, p);
        System.arraycopy(B, 0, mergedArray, p, q);

        Arrays.sort(mergedArray);

        System.arraycopy(mergedArray, 0, A, 0, p);
        System.arraycopy(mergedArray, p, B, 0, q);

        System.out.println("Sorted Arrays:");
        System.out.println("A: " + Arrays.toString(A));
        System.out.println("B: " + Arrays.toString(B));
    }
}


17.
import java.util.Arrays;

public class MaxProduct {
    public static void main(String[] args) {
        int[] nums = {2, 3, 5, 7, -7, 5, 8, -5};

        if (nums.length < 2) {
            System.out.println("No pairs exist.");
            return;
        }

        Arrays.sort(nums);

        int n = nums.length;
        int product1 = nums[0] * nums[1];
        int product2 = nums[n - 1] * nums[n - 2];

        if (product1 > product2) {
            System.out.println("Pair is (" + nums[0] + ", " + nums[1] + "), Maximum Product: " + product1);
        } else {
            System.out.println("Pair is (" + nums[n - 1] + ", " + nums[n - 2] + "), Maximum Product: " + product2);
        }
    }
}

18.
public class PrintMatrix {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}


19.

public class TransposeMatrix {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int[][] transpose = new int[matrix[0].length][matrix.length];

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }

        for (int i = 0; i < transpose.length; i++) {
            for (int j = 0; j < transpose[i].length; j++) {
                System.out.print(transpose[i][j] + " ");
            }
            System.out.println();
        }
    }
}



20.

public class SumOfMatrices {
    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int[][] matrix2 = {
            {9, 8, 7},
            {6, 5, 4},
            {3, 2, 1}
        };
        int[][] sum = new int[matrix1.length][matrix1[0].length];

        for (int i = 0; i < matrix1.length; i++) {
            for (int j = 0; j < matrix1[i].length; j++) {
                sum[i][j] = matrix1[i][j] + matrix2[i][j];
            }
        }

        for (int i = 0; i < sum.length; i++) {
            for (int j = 0; j < sum[i].length; j++) {
                System.out.print(sum[i][j] + " ");
            }
            System.out.println();
        }
    }
}




21.

public class RowColumnSum {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        for (int i = 0; i < matrix.length; i++) {
            int rowSum = 0;
            for (int j = 0; j < matrix[i].length; j++) {
                rowSum += matrix[i][j];
            }
            System.out.println("Sum of row " + (i + 1) + ": " + rowSum);
        }

        for (int i = 0; i < matrix[0].length; i++) {
            int colSum = 0;
            for (int j = 0; j < matrix.length; j++) {
                colSum += matrix[j][i];
            }
            System.out.println("Sum of column " + (i + 1) + ": " + colSum);
        }
    }
}



22.
public class MaxElementMatrix {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int max = matrix[0][0];

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] > max) {
                    max = matrix[i][j];
                }
            }
        }

        System.out.println("Largest element: " + max);
    }
}

23.
public class MatrixMultiplication {
    public static void main(String[] args) {
        int[][] matrix1 = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int[][] matrix2 = {
            {9, 8, 7},
            {6, 5, 4},
            {3, 2, 1}
        };
        int[][] product = new int[matrix1.length][matrix2[0].length];

        for (int i = 0; i < matrix1.length; i++) {
            for (int j = 0; j < matrix2[0].length; j++) {
                for (int k = 0; k < matrix2.length; k++) {
                    product[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }

        for (int i = 0; i < product.length; i++) {
            for (int j = 0; j < product[i].length; j++) {
                System.out.print(product[i][j] + " ");
            }
            System.out.println();
        }
    }
}

24.
public class RotateMatrix {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int n = matrix.length;

        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n - 1 - j][i];
                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];
                matrix[j][n - 1 - i] = temp;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}

25.
public class DiagonalSum {
    public static void main(String[] args) {
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };
        int primaryDiagonalSum = 0;
        int secondaryDiagonalSum = 0;

        for (int i = 0; i < matrix.length; i++) {
            primaryDiagonalSum += matrix[i][i];
            secondaryDiagonalSum += matrix[i][matrix.length - 1 - i];
        }

        System.out.println("Sum of primary diagonal: " + primaryDiagonalSum);
        System.out.println("Sum of secondary diagonal: " + secondaryDiagonalSum);
    }
}




